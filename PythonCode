

# Import Data and Libraries

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px


df = pd.read_csv('laptop.csv')

df.head(2)

# Next steps:
# Drop The unnecessary Columns

df.drop(columns=['Unnamed: 0.1','Unnamed: 0',], inplace=True)
Exploratory Data Analysis(EDA)

# Check Null Vaues

df.isnull().sum()

# Drop Null Values

df.dropna(inplace=True)

df.isnull().sum()

# Apply the one-hot Encoding for['Company','TypeName']


df=df.join(pd.get_dummies(df['Company']))
df.head(2)


df=df.join(pd.get_dummies(df.TypeName))
df.head(2)


 # Change DataType

df['ScreenResolution'] = df['ScreenResolution'].astype(str).str.split(" ").apply(lambda x: x[-1])
#Split Values and Create New Column

df['Screen Width']= df['ScreenResolution'].str.split("x").apply(lambda x: x[0])
df['Screen Height']= df['ScreenResolution'].str.split("x").apply(lambda x: x[1])
df.head(2)

df.info()
<class 'pandas.core.frame.DataFrame'>
Index: 1273 entries, 0 to 1302
Data columns (total 38 columns):
 #   Column              Non-Null Count  Dtype  
---  ------              --------------  -----  
 0   Company             1273 non-null   object 
 1   TypeName            1273 non-null   object 
 2   Inches              1273 non-null   object 
 3   ScreenResolution    1273 non-null   object 
 4   Cpu                 1273 non-null   object 
 5   Ram                 1273 non-null   object 
 6   Memory              1273 non-null   object 
 7   Gpu                 1273 non-null   object 
 8   OpSys               1273 non-null   object 
 9   Weight              1273 non-null   object 
 10  Price               1273 non-null   float64
 11  Acer                1273 non-null   bool   
 12  Apple               1273 non-null   bool   
 13  Asus                1273 non-null   bool   
 14  Chuwi               1273 non-null   bool   
 15  Dell                1273 non-null   bool   
 16  Fujitsu             1273 non-null   bool   
 17  Google              1273 non-null   bool   
 18  HP                  1273 non-null   bool   
 19  Huawei              1273 non-null   bool   
 20  LG                  1273 non-null   bool   
 21  Lenovo              1273 non-null   bool   
 22  MSI                 1273 non-null   bool   
 23  Mediacom            1273 non-null   bool   
 24  Microsoft           1273 non-null   bool   
 25  Razer               1273 non-null   bool   
 26  Samsung             1273 non-null   bool   
 27  Toshiba             1273 non-null   bool   
 28  Vero                1273 non-null   bool   
 29  Xiaomi              1273 non-null   bool   
 30  2 in 1 Convertible  1273 non-null   bool   
 31  Gaming              1273 non-null   bool   
 32  Netbook             1273 non-null   bool   
 33  Notebook            1273 non-null   bool   
 34  Ultrabook           1273 non-null   bool   
 35  Workstation         1273 non-null   bool   
 36  Screen Width        1273 non-null   object 
 37  Screen Height       1273 non-null   object 
dtypes: bool(25), float64(1), object(12)
memory usage: 202.6+ KB

# Feature Engineering


df['Cpu_Brand'] = df['Cpu'].str.split(" ").apply(lambda x: x[0])
df['Cpu_Frequency'] = df['Cpu'].str.split(" ").apply(lambda x: x[-1])

df.columns
Index(['Company', 'TypeName', 'Inches', 'ScreenResolution', 'Cpu', 'Ram',
       'Memory', 'Gpu', 'OpSys', 'Weight', 'Price', 'Acer', 'Apple', 'Asus',
       'Chuwi', 'Dell', 'Fujitsu', 'Google', 'HP', 'Huawei', 'LG', 'Lenovo',
       'MSI', 'Mediacom', 'Microsoft', 'Razer', 'Samsung', 'Toshiba', 'Vero',
       'Xiaomi', '2 in 1 Convertible', 'Gaming', 'Netbook', 'Notebook',
       'Ultrabook', 'Workstation', 'Screen Width', 'Screen Height',
       'Cpu_Brand', 'Cpu_Frequency'],
      dtype='object')

df.drop(columns=['Cpu','ScreenResolution','TypeName','Cpu'], inplace=True)
df.drop(columns=['Company'], inplace=True)

#Change Dtypes

df['Acer'] = df['Acer'].astype(int)
df['Apple'] = df['Apple'].astype(int)
df['Asus'] = df['Asus'].astype(int)
df['Dell'] = df['Dell'].astype(int)
df['Chuwi'] = df['Chuwi'].astype(int)
df['Lenovo'] = df['Lenovo'].astype(int)
df['MSI'] = df['MSI'].astype(int)
df['Razer'] = df['Razer'].astype(int)
df['Fujitsu'] = df['Fujitsu'].astype(int)
df['Microsoft'] = df['Microsoft'].astype(int)
df['Toshiba'] = df['Toshiba'].astype(int)
df['Huawei'] = df['Huawei'].astype(int)
df['Samsung'] = df['Samsung'].astype(int)
df['Mediacom'] = df['Mediacom'].astype(int)
df['Xiaomi'] = df['Xiaomi'].astype(int)
df['LG']= df['LG'].astype(int)
df['Google']= df['Google'].astype(int)
df['Vero'] = df['Vero'].astype(int)
df['HP'] = df['HP'].astype(int)


df['2 in 1 Convertible'] =df['2 in 1 Convertible'].astype(int)
df['Gaming'] = df['Gaming'].astype(int)
df['Netbook'] = df['Netbook'].astype(int)
df['Ultrabook'] = df['Ultrabook'].astype(int)
df['Notebook'] = df['Notebook'].astype(int)
df['Workstation'] = df['Workstation'].astype(int)

# Relace Value

df['Cpu_Frequency'] =df['Cpu_Frequency'].str.replace('GHz','')

df['Cpu_Frequency'] = df['Cpu_Frequency'].astype(float)

df.dropna(inplace=True)

# Change Data Types

df['Inches'] = df['Inches'].str.replace('?','').str.strip()  # Remove '?' and surrounding whitespace
df['Inches'] = df['Inches'].replace('', np.nan)  # Replace truly empty strings with NaN
df.dropna(subset=['Inches'], inplace=True)  # Remove rows with NaN in 'Inches'
df['Inches'] = df['Inches'].astype(float)  # Now convert to float


df['Ram'] = df['Ram'].str.replace('GB','')

df['Ram'] = df['Ram'].astype(int)




df['Memory Amount'] = df['Memory'].str.split(" ").apply(lambda x: x[0])
df['Memory Type'] = df['Memory'].str.split(" ").apply(lambda x: x[-1])


def convert_gb_to_mb(value):
    if "GB" in value:
        return float(value[:value.find("GB")]) * 1000
    elif value.endswith('TB'):
        return float(value[:value.find("TB")]) * 1000000

df['Memory Amount'] = df['Memory Amount'].apply(convert_gb_to_mb)


df=df.drop(columns=['Memory'],axis=1)


df['Gpu Brand'] = df['Gpu'].str.split(" ").apply(lambda x: x[0])
df.drop(columns=['Gpu'], inplace=True)


df = df.join(pd.get_dummies(df['OpSys']))


df['Screen Width'] = df['Screen Width'].astype(int)
df['Screen Height'] = df['Screen Height'].astype(int)


df['Android'] = df['Android'].astype(int)
df['Mac OS X'] = df['Mac OS X'].astype(int)
df['Windows 10'] = df['Windows 10'].astype(int)
df['Windows 7'] = df['Windows 7'].astype(int)
df['Windows 10 S'] = df['Windows 10 S'].astype(int)
df['Linux'] = df['Linux'].astype(int)
df['Chrome OS'] = df['Chrome OS'].astype(int)
df['No OS'] = df['No OS'].astype(int)
df['macOS'] = df['macOS'].astype(int)

df.drop(columns=['OpSys'], inplace=True)


df['Weight'] = df['Weight'].str.replace('kg','')
Weight'] = df['Weight'].str.replace('?', '').str.strip() # Replace '?' and strip whitespace
df['Weight'] = df['Weight'].replace('', np.nan) # Replace empty strings with NaN
df.dropna(subset=['Weight'], inplace=True) # Drop rows where 'Weight' is empty
df['Weight'] = df['Weight'].astype(float)


cpu_categories = pd.get_dummies(df['Cpu_Brand'])
cpu_categories.columns = [col + '_Cpu' for col in cpu_categories.columns]
df = pd.concat([df, cpu_categories], axis=1)


df.drop(columns=['Cpu_Brand'], inplace=True)

df['AMD_Cpu'] = df['AMD_Cpu'].astype(int)
df['Intel_Cpu'] = df['Intel_Cpu'].astype(int)
df['Samsung_Cpu'] = df['Samsung_Cpu'].astype(int)


gpu_categories = pd.get_dummies(df['Gpu Brand'])
gpu_categories.columns = [col + '_Cpu' for col in gpu_categories.columns]
df = pd.concat([df, gpu_categories], axis=1)

df['AMD_Cpu'] = df['AMD_Cpu'].astype(int)
df['Nvidia_Cpu'] = df['Nvidia_Cpu'].astype(int)
df['Intel_Cpu'] = df['Intel_Cpu'].astype(int)
df['ARM_Cpu'] = df['ARM_Cpu'].astype(int)


df.drop(columns=['Gpu Brand'], inplace=True)


df.drop(columns=['Memory Type'],inplace=True)

# Check Correlation

target_correlations = df.corr()['Price'].apply(abs).sort_values(ascending=False)



target_correlations

# Feature Selection 


selected_features = target_correlations[:10].index


selected_features
Index(['Price', 'Ram', 'Screen Width', 'Screen Height', 'Notebook',
       'Cpu_Frequency', 'Gaming', 'Nvidia_Cpu', 'Ultrabook', 'Workstation'],
      dtype='object')

limited_df = df[selected_features]


limited_df

# Next steps:
# Check correlation on heatmap()

plt.figure(figsize=(18, 6))
sns.heatmap(limited_df.corr(), annot=True, cmap='coolwarm')
plt.title('Correlation Heatmap')
plt.show()

# Import The Model ana Start Traning


from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
X = limited_df.drop('Price', axis=1)
y = limited_df['Price']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)


# model-1

forest = RandomForestRegressor()
forest.fit(X_train_scaled, y_train)

# model-2

from sklearn.tree import DecisionTreeRegressor
tree = DecisionTreeRegressor()
tree.fit(X_train_scaled, y_train)

# model-3

from sklearn.linear_model import LinearRegression
lreshape = LinearRegression()
lreshape.fit(X_train_scaled, y_train)

# model-4
from xgboost import XGBRegressor
xg = XGBRegressor()
xg.fit(X_train_scaled, y_train)


# Check  Score

lreshape.score(X_test_scaled, y_test)
0.6664549753087256

xg.score(X_test_scaled, y_test)
0.7623459354773954

tree.score(X_test_scaled, y_test)
0.7730972320748377


forest.score(X_test_scaled, y_test)
0.7884988107885695


forest.predict(X_test_scaled)
array([ 80860.3032    ,  68358.83968168, 153767.95822783,  33856.81915804,
        19070.35271847,  34598.59183506,  70841.81662937,  85289.73772253,
        52381.10750753,  52829.01432388,  86753.87166857,  17407.33517894,
       102024.61326   ,  52829.01432388,  55288.72636153,  36958.00330089,
        19070.35271847,  65138.186832  ,  19346.20673025,  41639.56905837,
        53271.7239396 ,  24015.47728979,  17181.221928  , 108539.41204783,
        85289.73772253, 102082.81823274,  36958.00330089,  86572.69302857,
       103810.65437735,  82050.56923246,  12721.65890611,  19346.20673025,
        25677.42074325,  41639.56905837,  63966.54918051,  50580.49701039,
        17181.221928  ,  17181.221928  ,  35335.97387343,  19346.20673025,
        47834.22093959,  71512.64150594,  53520.15498701,  47834.22093959,
        24350.72050571,  25254.37859482, 101428.27214719,  25254.37859482,
        80995.72550145,  96581.12417408,  96581.12417408,  91379.89621504,
        83894.61696   ,  30585.04275429,  19346.20673025,  19346.20673025,
        63966.54918051,  61735.6400144 ,  33856.81915804,  52574.79593247,
        36933.64601851,  94250.9983304 ,  63156.05956139,  47834.22093959,
        36933.64601851,  75991.70862497,  22297.14212571,  50580.49701039,
       135615.4419624 ,  25328.868     ,  37637.04084   , 102585.04605073,
        61884.25393413,  19346.20673025, 123462.81636092, 102082.81823274,
        21881.62174457,  54674.93576876,  41639.56905837,  53520.15498701,
        37576.76742675, 106203.82175383, 101428.27214719,  45586.34477069,
        92014.08300929,  25373.58311314,  33974.329662  ,  70794.46450847,
        39953.46324674,  25254.37859482,  17181.221928  ,  73398.2022816 ,
       279258.79975714,  49219.60392374,  33856.81915804,  35486.82685714,
        52748.90498974,  63156.05956139, 101428.27214719,  29118.74544   ,
        17181.221928  ,  33856.81915804,  54674.93576876,  30974.73426   ,
       101428.27214719,  19346.20673025,  52829.01432388,  79039.8767376 ,
        93685.38629486,  55288.72636153,  13092.87480651,  41639.56905837,
        37576.76742675,  55288.72636153,  86887.211148  , 121171.23359221,
        70841.81662937,  47834.22093959,  99295.8048    ,  25254.37859482,
        52829.01432388,  54674.93576876,  32633.2276916 ,  37789.89598807,
        25254.37859482,  35335.97387343,  66346.0792581 , 101428.27214719,
        45586.34477069,  72965.18942803,  66346.0792581 ,  80995.72550145,
        43708.29123309,  53520.15498701,  75991.70862497,  24350.72050571,
        51334.13906748,  63156.05956139,  81825.09966   ,  31250.35772571,
        16290.34073942,  54674.93576876,  25254.37859482,  66346.0792581 ,
        25328.868     ,  19346.20673025,  72965.18942803,  54674.93576876,
        25373.58311314,  66346.0792581 ,  56113.47099429,  55288.72636153,
        80995.72550145,  32633.2276916 ,  61884.25393413,  63156.05956139,
        80375.03936229,  36933.64601851,  37637.04084   ,  39953.46324674,
        24350.72050571,  71512.64150594,  97639.7292    ,  61884.25393413,
        54674.93576876,  25254.37859482,  52748.90498974,  51334.13906748,
       103810.65437735, 101428.27214719,  35561.98895314,  36351.12164602,
        80995.72550145,  63156.05956139,  67639.33435543,  42279.678     ,
        31250.35772571,  45586.34477069, 110959.24110722,  96110.89080686,
        16290.34073942,  66346.0792581 ,  52829.01432388,  28401.62328   ,
       101428.27214719,  25254.37859482,  33856.81915804,  17181.221928  ,
        96581.12417408,  85289.73772253,  46260.26051945, 150373.47997134,
       124930.88828972,  96581.12417408,  52829.01432388,  29118.74544   ,
        92965.21728   ,  59835.61140117, 128399.25969823,  28401.62328   ,
        71512.64150594,  21881.62174457,  36933.64601851, 101428.27214719,
        90311.83214358,  81715.54682245,  19346.20673025,  70841.81662937,
        63914.393184  , 119508.13224   ,  87476.60107175,  47834.22093959,
        25254.37859482,  69256.64437575,  99295.8048    ,  38734.63774977,
        37954.84709104,  58399.17572383, 101428.27214719,  30636.43753029,
        35486.82685714,  25254.37859482, 134007.142272  ,  17181.221928  ,
        65904.40689417,  41639.56905837,  19346.20673025,  20066.770624  ,
        25254.37859482,  17181.221928  ,  70841.81662937,  36958.00330089,
        50580.49701039,  12721.65890611,  47834.22093959,  63657.09113958,
        39953.46324674,  54674.93576876,  41639.56905837, 116541.5962493 ,
        17181.221928  ,  41639.56905837,  17181.221928  , 116541.5962493 ,
        63156.05956139,  84618.15428571,  17407.33517894,  38734.63774977,
        65138.186832  ,  36514.32571341,  31914.60515584,  25254.37859482,
        33856.81915804,  22297.14212571, 120097.40904   ])
